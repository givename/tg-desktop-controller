import { exec } from 'child_process';
import { promisify } from 'util';
import si from 'systeminformation';
import os from 'os';
import fs from 'fs';

import { env } from './env.config.mjs';
import { formatNetworkSpeed, formatUptime, sleep } from './utils.mjs';
import {
  ERRORS,
  STATUS,
  CONSOLE_MESSAGES,
  ERROR_TEMPLATES,
  NETWORK_SPEED_TEMPLATE,
  SYSTEM_INFO_TEMPLATE,
  AUDIO_INFO_TEMPLATE,
  SCREENSHOT_CAPTION_TEMPLATE,
  COMMAND_DESCRIPTIONS,
  SYSTEM_COMMANDS,
} from './text.provider.mjs';

const execAsync = promisify(exec);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è nircmd –∫–æ–º–∞–Ω–¥
async function execNircmdHidden(command) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ nircmd
  try {
    // –ü–æ–¥—Ö–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º CreateNoWindow flag —á–µ—Ä–µ–∑ spawn
    const { spawn } = await import('child_process');
    const args = command.split(' ').slice(1); // –£–±–∏—Ä–∞–µ–º 'nircmd'

    return new Promise((resolve, reject) => {
      const child = spawn('nircmd', args, {
        windowsHide: true,
        detached: false,
        stdio: ['ignore', 'pipe', 'pipe'],
      });

      let stdout = '';
      let stderr = '';

      if (child.stdout) {
        child.stdout.on('data', (data) => {
          stdout += data.toString();
        });
      }

      if (child.stderr) {
        child.stderr.on('data', (data) => {
          stderr += data.toString();
        });
      }

      child.on('close', (code) => {
        if (code === 0) {
          resolve({ stdout, stderr });
        } else {
          reject(new Error(`nircmd exited with code ${code}: ${stderr}`));
        }
      });

      child.on('error', (error) => {
        reject(error);
      });
    });
  } catch (error) {
    // Fallback –∫ execAsync —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏
    console.warn('‚ö†Ô∏è Fallback –∫ execAsync –¥–ª—è nircmd');
    return execAsync(command, {
      windowsHide: true,
      shell: false,
      stdio: ['ignore', 'pipe', 'pipe'],
    });
  }
}

// –û–±—â–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ NirCmd
export async function executeCommand(command, description) {
  try {
    console.log(`‚úÖ ${description}: ${command}`);
    const { stdout, stderr } = await execAsync(command);

    if (stderr && stderr.trim()) {
      console.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è ${description}: ${stderr}`);
    }

    return {
      success: true,
      output: stdout.trim(),
      error: null,
    };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ ${description}: ${error.message}`);
    return {
      success: false,
      output: '',
      error: error.message,
    };
  }
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º —á–µ—Ä–µ–∑ nircmd - –£–õ–£–ß–®–ï–ù–ù–´–ï –ë–ï–ó POWERSHELL
export async function getCurrentVolume() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º SoundVolumeCommandLine (svcl.exe) –æ—Ç NirSoft
    const { stdout } = await execAsync('svcl.exe /Stdout /GetPercent "DefaultRenderDevice"');
    const volumePercent = parseInt(stdout.trim());
    if (!isNaN(volumePercent)) {
      return `${volumePercent}%`;
    }
    return STATUS.UNKNOWN;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏:', error);
    return STATUS.UNKNOWN;
  }
}

export async function getMuteStatus() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º SoundVolumeCommandLine –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ mute
    const { stdout } = await execAsync('svcl.exe /Stdout /GetMute "DefaultRenderDevice"');
    const muteStatus = stdout.trim().toLowerCase();
    if (muteStatus === '1') return STATUS.DISABLED;
    if (muteStatus === '0') return STATUS.ENABLED;
    return STATUS.UNKNOWN;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ mute:', error);
    return STATUS.UNKNOWN;
  }
}

export async function soundOn() {
  try {
    await execNircmdHidden('nircmd mutesysvolume 0');
    console.log('‚úÖ –ó–≤—É–∫ –≤–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ nircmd');
    return { success: true, message: 'üîä –ó–≤—É–∫ –≤–∫–ª—é—á–µ–Ω' };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞', error: error.message };
  }
}

export async function soundOff() {
  try {
    await execNircmdHidden('nircmd mutesysvolume 1');
    console.log('‚úÖ –ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ nircmd');
    return { success: true, message: 'üîá –ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω' };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞', error: error.message };
  }
}

export async function setVolume(volume) {
  try {
    const vol = Math.max(0, Math.min(100, volume));
    const nircmdVolume = Math.round((vol / 100) * 65535);
    await execNircmdHidden(`nircmd setsysvolume ${nircmdVolume}`);
    console.log(`‚úÖ –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${vol}% —á–µ—Ä–µ–∑ nircmd`);
    return { success: true, volume: vol };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏:', error);
    return { success: false, error: error.message };
  }
}

export async function volumeUp() {
  try {
    const changeAmount = Math.round(65535 * 0.05);
    await execNircmdHidden(`nircmd changesysvolume ${changeAmount}`);
    console.log('‚úÖ –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ —á–µ—Ä–µ–∑ nircmd');
    return { success: true, message: 'üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞' };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏', error: error.message };
  }
}

export async function volumeDown() {
  try {
    const changeAmount = Math.round(65535 * 0.05);
    await execNircmdHidden(`nircmd changesysvolume -${changeAmount}`);
    console.log('‚úÖ –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞ —á–µ—Ä–µ–∑ nircmd');
    return { success: true, message: 'üîâ –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞' };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏', error: error.message };
  }
}

export async function getCurrentTrack() {
  // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ù–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è"
  return STATUS.TRACK_UNDETERMINED;
}

export async function getPlaybackStatus() {
  try {
    const psCommand = `
      Add-Type -AssemblyName System.Runtime.WindowsRuntime
      $null = [Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager, Windows.Media.Control, ContentType = WindowsRuntime]
      $sessionManager = [Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager]::RequestAsync()
      $sessionManager.AsTask().Wait(-1) | Out-Null
      $currentSession = $sessionManager.Result.GetCurrentSession()
      if ($currentSession) {
        $playbackInfo = $currentSession.GetPlaybackInfo()
        $status = $playbackInfo.PlaybackStatus
        Write-Output "STATUS:$status"
        if ($status -eq 'Playing') {
          Write-Output 'Playing'
        } elseif ($status -eq 'Paused') {
          Write-Output 'Paused'  
        } else {
          Write-Output 'Stopped'
        }
      } else {
        Write-Output 'NO_SESSION'
        Write-Output 'Undetermined'
      }
    `
      .replace(/\s+/g, ' ')
      .trim();

    const { stdout } = await execAsync(`powershell -Command "${psCommand}"`);
    console.log('üéµ –í—ã–≤–æ–¥ PowerShell –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:');
    console.log(stdout);

    const lines = stdout.split('\n');
    const status = lines[lines.length - 1].trim().toLowerCase();

    console.log(`üéµ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: "${status}"`);

    if (status === 'playing') return STATUS.PLAYING;
    if (status === 'paused') return STATUS.PAUSED;
    if (status === 'undetermined') return STATUS.TRACK_UNDETERMINED;

    return STATUS.STOPPED;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
    return STATUS.TRACK_UNDETERMINED;
  }
}

export async function getMicrophoneStatus() {
  // –ó–∞–≥–ª—É—à–∫–∞ - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–π"
  return STATUS.TRACK_UNDETERMINED;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∞—É–¥–∏–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export async function getAudioInfo() {
  console.log('üîç –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –∞—É–¥–∏–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...');
  const startTime = performance.now();

  try {
    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const functionTimings = {};

    const createTimedFunction = (func, name) => {
      return async () => {
        const funcStart = performance.now();
        try {
          const result = await func();
          const funcEnd = performance.now();
          functionTimings[name] = (funcEnd - funcStart).toFixed(2);
          console.log(`‚è±Ô∏è ${name}: ${functionTimings[name]}ms`);
          return result;
        } catch (error) {
          const funcEnd = performance.now();
          functionTimings[name] = (funcEnd - funcStart).toFixed(2);
          console.log(`‚è±Ô∏è ${name}: ${functionTimings[name]}ms (–û–®–ò–ë–ö–ê)`);
          throw error;
        }
      };
    };

    const results = await Promise.allSettled([
      createTimedFunction(getCurrentVolume, 'getCurrentVolume')(),
      createTimedFunction(getMuteStatus, 'getMuteStatus')(),
      createTimedFunction(getCurrentTrack, 'getCurrentTrack')(),
      createTimedFunction(getPlaybackStatus, 'getPlaybackStatus')(),
      createTimedFunction(getMicrophoneStatus, 'getMicrophoneStatus')(),
    ]);

    const [volumeResult, muteResult, trackResult, playResult, micResult] = results;

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:');
    console.log(
      `   –ì—Ä–æ–º–∫–æ—Å—Ç—å: ${volumeResult.status === 'fulfilled' ? volumeResult.value : '–û–®–ò–ë–ö–ê - ' + volumeResult.reason}`
    );
    console.log(
      `   Mute —Å—Ç–∞—Ç—É—Å: ${muteResult.status === 'fulfilled' ? muteResult.value : '–û–®–ò–ë–ö–ê - ' + muteResult.reason}`
    );
    console.log(
      `   –¢—Ä–µ–∫: ${trackResult.status === 'fulfilled' ? trackResult.value : '–û–®–ò–ë–ö–ê - ' + trackResult.reason}`
    );
    console.log(
      `   –°—Ç–∞—Ç—É—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${playResult.status === 'fulfilled' ? playResult.value : '–û–®–ò–ë–ö–ê - ' + playResult.reason}`
    );
    console.log(
      `   –ú–∏–∫—Ä–æ—Ñ–æ–Ω: ${micResult.status === 'fulfilled' ? micResult.value : '–û–®–ò–ë–ö–ê - ' + micResult.reason}`
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const totalTime = (performance.now() - startTime).toFixed(2);
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
    console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
    Object.entries(functionTimings).forEach(([name, time]) => {
      const percentage = ((parseFloat(time) / parseFloat(totalTime)) * 100).toFixed(1);
      console.log(`   ${name}: ${time}ms (${percentage}%)`);
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—É—é –º–µ–¥–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if (Object.keys(functionTimings).length > 0) {
      const slowestFunc = Object.entries(functionTimings).reduce((a, b) =>
        parseFloat(a[1]) > parseFloat(b[1]) ? a : b
      );
      console.log(`üêå –°–∞–º–∞—è –º–µ–¥–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: ${slowestFunc[0]} (${slowestFunc[1]}ms)`);
    }

    const volume = volumeResult.status === 'fulfilled' ? volumeResult.value : STATUS.UNKNOWN;
    const muteStatus = muteResult.status === 'fulfilled' ? muteResult.value : STATUS.UNKNOWN;
    const track = trackResult.status === 'fulfilled' ? trackResult.value : STATUS.NOTHING_PLAYING;
    const playStatus = playResult.status === 'fulfilled' ? playResult.value : STATUS.STOPPED;
    const micStatus =
      micResult.status === 'fulfilled' ? micResult.value : STATUS.TRACK_UNDETERMINED;

    return AUDIO_INFO_TEMPLATE({
      soundStatus: muteStatus,
      volume,
      microphoneStatus: micStatus,
      playbackStatus: playStatus,
      currentTrack: track,
    });
  } catch (error) {
    const totalTime = (performance.now() - startTime).toFixed(2);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ getAudioInfo (${totalTime}ms):`, error);
    return AUDIO_INFO_TEMPLATE({
      soundStatus: STATUS.UNKNOWN,
      volume: STATUS.UNKNOWN,
      microphoneStatus: STATUS.UNKNOWN,
      playbackStatus: STATUS.UNKNOWN,
      currentTrack: STATUS.NOTHING_PLAYING,
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
export async function getNetworkSpeed() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    const networkInterfaces = await si.networkInterfaces();
    const activeInterface = networkInterfaces.find(
      (iface) =>
        iface.default ||
        (iface.type === 'wireless' && iface.operstate === 'up') ||
        (iface.type === 'wired' && iface.operstate === 'up')
    );

    if (!activeInterface) {
      return `üì° ${ERRORS.ACTIVE_INTERFACE_NOT_FOUND}`;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats1 = await si.networkStats(activeInterface.iface);

    // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–º–µ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await sleep(5000);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    const stats2 = await si.networkStats(activeInterface.iface);

    if (stats1.length > 0 && stats2.length > 0) {
      const timeDiff = 5; // 5 —Å–µ–∫—É–Ω–¥
      const rxSpeed = (stats2[0].rx_bytes - stats1[0].rx_bytes) / timeDiff; // –±–∞–π—Ç/—Å–µ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const txSpeed = (stats2[0].tx_bytes - stats1[0].tx_bytes) / timeDiff; // –±–∞–π—Ç/—Å–µ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

      return NETWORK_SPEED_TEMPLATE(formatNetworkSpeed(txSpeed), formatNetworkSpeed(rxSpeed));
    }

    return `üì° ${ERRORS.NETWORK_SPEED_MEASUREMENT_FAILED}`;
  } catch (error) {
    console.error(CONSOLE_MESSAGES.NETWORK_SPEED_ERROR_LOG(error));
    return `üì° ${ERRORS.NETWORK_SPEED_ERROR}`;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ nircmd
export async function takeScreenshots() {
  try {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');

    // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–∞–ø–æ–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const possibleDirs = [
      process.env.TEMP,
      process.env.TMP,
      'C:\\Windows\\Temp',
      'C:\\Temp',
      process.cwd(),
      'C:\\Users\\Public\\Desktop',
    ].filter(Boolean);

    let tempDir = null;
    let dirIndex = 0;

    // –ò—â–µ–º —Ä–∞–±–æ—á—É—é –ø–∞–ø–∫—É
    for (const dir of possibleDirs) {
      const cleanDir = dir.replace(/[\\\/]+$/, '');
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–∞–ø–∫—É ${dirIndex + 1}/${possibleDirs.length}: ${cleanDir}`);

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏
        if (!fs.existsSync(cleanDir)) {
          fs.mkdirSync(cleanDir, { recursive: true });
          console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${cleanDir}`);
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
        const testFile = `${cleanDir}\\test_write_${Date.now()}.tmp`;
        fs.writeFileSync(testFile, 'test');
        fs.unlinkSync(testFile);

        tempDir = cleanDir;
        console.log(`‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ä–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: ${tempDir}`);
        break;
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ü–∞–ø–∫–∞ ${cleanDir} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`);
      }
      dirIndex++;
    }

    if (!tempDir) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    let monitorCount = 1;
    try {
      console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö —á–µ—Ä–µ–∑ WMIC...');
      const { stdout: monitorInfo } = await execAsync(
        'wmic path Win32_DesktopMonitor get Name /format:csv'
      );

      console.log('üìã –°—ã—Ä–æ–π –≤—ã–≤–æ–¥ WMIC:');
      console.log('---START---');
      console.log(monitorInfo);
      console.log('---END---');

      const allLines = monitorInfo.split('\n');
      console.log(`üìè –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: ${allLines.length}`);

      allLines.forEach((line, index) => {
        console.log(`–°—Ç—Ä–æ–∫–∞ ${index}: "${line}" (–¥–ª–∏–Ω–∞: ${line.length})`);
      });

      const monitors = monitorInfo.split('\n').filter((line) => {
        const trimmed = line.trim();
        const hasNode = trimmed.toLowerCase().includes('node');
        const hasName = trimmed.toLowerCase().includes('name');
        const hasComma = trimmed.includes(',');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ/–≥–µ–Ω–µ—Ä–∏—á–µ—Å–∫–∏–µ –º–æ–Ω–∏—Ç–æ—Ä—ã (—Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–∫–∞–∂–µ–Ω –∏–∑-–∑–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏)
        const lowerLine = trimmed.toLowerCase();
        const isGenericMonitor =
          lowerLine.includes('—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π') ||
          lowerLine.includes('universal') ||
          lowerLine.includes('generic') ||
          lowerLine.includes('pnp monitor') ||
          lowerLine.includes('pnp –¥–∏—Å–ø–ª–µ–π') ||
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π"
          /[\u0430-\u044f\u0410-\u042f]*\s*pnp/i.test(lowerLine) ||
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏—Å–∫–∞–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
          /[–∞-—è]*\s*[–∞-—è]*\s*pnp/i.test(lowerLine);

        console.log(`üîé –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫–∏: "${trimmed}"`);
        console.log(`   - –ù–µ –ø—É—Å—Ç–∞—è: ${!!trimmed}`);
        console.log(`   - –°–æ–¥–µ—Ä–∂–∏—Ç 'node': ${hasNode}`);
        console.log(`   - –°–æ–¥–µ—Ä–∂–∏—Ç 'name': ${hasName}`);
        console.log(`   - –°–æ–¥–µ—Ä–∂–∏—Ç ',': ${hasComma}`);
        console.log(`   - –ì–µ–Ω–µ—Ä–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä: ${isGenericMonitor}`);

        const result = trimmed && !hasNode && !hasName && hasComma && !isGenericMonitor;
        console.log(`   - –†–ï–ó–£–õ–¨–¢–ê–¢ –§–ò–õ–¨–¢–†–ê: ${result}`);

        return result;
      });

      console.log(`üñ•Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã (${monitors.length}):`);
      monitors.forEach((monitor, index) => {
        console.log(`  ${index + 1}: "${monitor}"`);
      });

      monitorCount = Math.max(1, monitors.length);
      console.log(`üéØ –ò–¢–û–ì–û –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: ${monitorCount}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö:', error);
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback: 1 –º–æ–Ω–∏—Ç–æ—Ä');
      monitorCount = 1;
    }

    const filename = `screenshot_${timestamp}.png`;
    const filepath = `${tempDir}\\${filename}`;

    console.log(`üì∏ –°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç: ${filepath}`);

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    let screenshotCreated = false;

    // –ú–µ—Ç–æ–¥ 1: execNircmdHidden
    try {
      await execNircmdHidden(`nircmd savescreenshot "${filepath}"`);
      console.log('üîß –ü–æ–ø—ã—Ç–∫–∞ 1: execNircmdHidden');

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
      await sleep(500);

      if (fs.existsSync(filepath)) {
        screenshotCreated = true;
        console.log('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ execNircmdHidden');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è execNircmdHidden –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
    }

    // –ú–µ—Ç–æ–¥ 2: –æ–±—ã—á–Ω—ã–π execAsync
    if (!screenshotCreated) {
      try {
        await execAsync(`nircmd savescreenshot "${filepath}"`);
        console.log('üîß –ü–æ–ø—ã—Ç–∫–∞ 2: –æ–±—ã—á–Ω—ã–π execAsync');

        await sleep(500);

        if (fs.existsSync(filepath)) {
          screenshotCreated = true;
          console.log('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ execAsync');
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è execAsync —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
      }
    }

    // –ú–µ—Ç–æ–¥ 3: PowerShell –∫–∞–∫ fallback
    if (!screenshotCreated) {
      try {
        const psCommand = `
          Add-Type -AssemblyName System.Windows.Forms
          Add-Type -AssemblyName System.Drawing
          $bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
          $bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
          $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
          $graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
          $bitmap.Save("${filepath.replace(/\\/g, '\\\\')}", [System.Drawing.Imaging.ImageFormat]::Png)
          $graphics.Dispose()
          $bitmap.Dispose()
          Write-Host "Screenshot saved"
        `
          .replace(/\s+/g, ' ')
          .trim();

        await execAsync(`powershell -Command "${psCommand}"`);
        console.log('üîß –ü–æ–ø—ã—Ç–∫–∞ 3: PowerShell');

        await sleep(500);

        if (fs.existsSync(filepath)) {
          screenshotCreated = true;
          console.log('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ PowerShell');
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è PowerShell —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (!screenshotCreated || !fs.existsSync(filepath)) {
      throw new Error(`–§–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤: ${filepath}`);
    }

    const stats = fs.statSync(filepath);
    console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: ${filepath} (${Math.round(stats.size / 1024)} –ö–ë)`);

    return {
      success: true,
      screenshots: [
        {
          filepath: filepath,
          caption: SCREENSHOT_CAPTION_TEMPLATE('Primary', 1, monitorCount),
        },
      ],
      message: `‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: ${filename}`,
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', error);
    return {
      success: false,
      error: error.message,
    };
  }
}

// –ú–µ–¥–∏–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ nircmd
export async function playAudio() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    const currentStatus = await getPlaybackStatus();

    if (currentStatus === STATUS.PLAYING) {
      console.log('üéµ –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É');
      return { success: true, message: '‚ñ∂Ô∏è –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç' };
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Play/Pause —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç
    await execNircmdHidden('nircmd sendkeypress 0xB3');
    console.log('‚úÖ Play –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ nircmd');
    return { success: true, message: '‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ' };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è', error: error.message };
  }
}

export async function pauseAudio() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    const currentStatus = await getPlaybackStatus();

    if (currentStatus === STATUS.PAUSED || currentStatus === STATUS.STOPPED) {
      console.log('üéµ –ú—É–∑—ã–∫–∞ —É–∂–µ –Ω–∞ –ø–∞—É–∑–µ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É');
      return { success: true, message: '‚è∏Ô∏è –ú—É–∑—ã–∫–∞ —É–∂–µ –Ω–∞ –ø–∞—É–∑–µ' };
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Play/Pause —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞–µ—Ç
    await execNircmdHidden('nircmd sendkeypress 0xB3');
    console.log('‚úÖ Pause –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ nircmd');
    return { success: true, message: '‚è∏Ô∏è –ü–∞—É–∑–∞' };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã', error: error.message };
  }
}

export async function nextTrack() {
  try {
    await execNircmdHidden('nircmd sendkeypress 0xB0');
    console.log('‚úÖ –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ nircmd');
    return { success: true, message: '‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫' };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞', error: error.message };
  }
}

export async function previousTrack() {
  try {
    await execNircmdHidden('nircmd sendkeypress 0xB1');
    console.log('‚úÖ –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ nircmd');
    return { success: true, message: '‚èÆÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫' };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞', error: error.message };
  }
}

export async function microphoneOn() {
  // –ó–∞–≥–ª—É—à–∫–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è Windows
  console.log('üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω "–≤–∫–ª—é—á–µ–Ω" (–∑–∞–≥–ª—É—à–∫–∞)');
  return { success: true, message: 'üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω' };
}

export async function microphoneOff() {
  // –ó–∞–≥–ª—É—à–∫–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è Windows
  console.log('üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω "–≤—ã–∫–ª—é—á–µ–Ω" (–∑–∞–≥–ª—É—à–∫–∞)');
  return { success: true, message: 'üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω' };
}

// –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ nircmd
export async function displayOff() {
  try {
    await execNircmdHidden('nircmd monitor off');
    console.log('‚úÖ –î–∏—Å–ø–ª–µ–π –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ nircmd');
    return { success: true, message: 'üñ•Ô∏è –î–∏—Å–ø–ª–µ–π –≤—ã–∫–ª—é—á–µ–Ω' };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –¥–∏—Å–ø–ª–µ—è:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –¥–∏—Å–ø–ª–µ—è', error: error.message };
  }
}

export async function suspendSystem() {
  try {
    await execNircmdHidden('nircmd standby');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ nircmd');
    return { success: true, message: 'üí§ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º' };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º', error: error.message };
  }
}

export async function rebootSystem() {
  try {
    await execNircmdHidden('nircmd exitwin reboot');
    console.log('‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ nircmd');
    return { success: true, message: 'üîÑ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è' };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã', error: error.message };
  }
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ nircmd
export async function cleanupTempFiles(filepaths) {
  try {
    for (const filepath of filepaths) {
      await execNircmdHidden(`nircmd deletefile "${filepath}"`);
      console.log(`‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${filepath}`);
    }
    return { success: true, message: `üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${filepaths.length}` };
  } catch (error) {
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤', error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
export async function getSystemInfo() {
  console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...');
  const startTime = performance.now();

  try {
    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const componentTimings = {};

    const measureComponent = async (func, name) => {
      const compStart = performance.now();
      try {
        const result = await func();
        const compEnd = performance.now();
        componentTimings[name] = (compEnd - compStart).toFixed(2);
        console.log(`‚è±Ô∏è ${name}: ${componentTimings[name]}ms`);
        return result;
      } catch (error) {
        const compEnd = performance.now();
        componentTimings[name] = (compEnd - compStart).toFixed(2);
        console.log(`‚è±Ô∏è ${name}: ${componentTimings[name]}ms (–û–®–ò–ë–ö–ê)`);
        throw error;
      }
    };

    const [cpu, mem, osInfo, system, graphics] = await Promise.all([
      measureComponent(() => si.cpu(), 'si.cpu'),
      measureComponent(() => si.mem(), 'si.mem'),
      measureComponent(() => si.osInfo(), 'si.osInfo'),
      measureComponent(() => si.system(), 'si.system'),
      measureComponent(() => si.graphics(), 'si.graphics'),
    ]);

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É CPU –∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    const cpuLoad = await measureComponent(() => si.currentLoad(), 'si.currentLoad');
    const uptimeStart = performance.now();
    const uptimeSeconds = os.uptime();
    const formattedUptime = formatUptime(uptimeSeconds);
    const uptimeEnd = performance.now();
    componentTimings['os.uptime + formatUptime'] = (uptimeEnd - uptimeStart).toFixed(2);
    console.log(`‚è±Ô∏è os.uptime + formatUptime: ${componentTimings['os.uptime + formatUptime']}ms`);

    // –†–∞—Å—á–µ—Ç –ø–∞–º—è—Ç–∏
    const memCalcStart = performance.now();
    const totalMemGB = (mem.total / 1024 / 1024 / 1024).toFixed(1);
    const freeMemGB = (mem.free / 1024 / 1024 / 1024).toFixed(1);
    const usedMemGB = ((mem.total - mem.free) / 1024 / 1024 / 1024).toFixed(1);
    const memUsagePercent = (((mem.total - mem.free) / mem.total) * 100).toFixed(1);
    const memCalcEnd = performance.now();
    componentTimings['memory calculations'] = (memCalcEnd - memCalcStart).toFixed(2);
    console.log(`‚è±Ô∏è memory calculations: ${componentTimings['memory calculations']}ms`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏ –∑–∞ 5 —Å–µ–∫—É–Ω–¥
    const networkSpeed = await measureComponent(() => getNetworkSpeed(), 'getNetworkSpeed');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const totalTime = (performance.now() - startTime).toFixed(2);
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ getSystemInfo:');
    console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
    Object.entries(componentTimings).forEach(([name, time]) => {
      const percentage = ((parseFloat(time) / parseFloat(totalTime)) * 100).toFixed(1);
      console.log(`   ${name}: ${time}ms (${percentage}%)`);
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    if (Object.keys(componentTimings).length > 0) {
      const slowestComp = Object.entries(componentTimings).reduce((a, b) =>
        parseFloat(a[1]) > parseFloat(b[1]) ? a : b
      );
      console.log(`üêå –°–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: ${slowestComp[0]} (${slowestComp[1]}ms)`);
    }

    console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞');

    return SYSTEM_INFO_TEMPLATE({
      motherboard: `${system.manufacturer} ${system.model}`,
      cpu: `${cpu.manufacturer} ${cpu.brand}`,
      cores: `${cpu.cores} (${cpu.physicalCores} —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö)`,
      graphics: graphics.controllers.map((gpu) => `${gpu.vendor} ${gpu.model}`).join(', '),
      os: `${osInfo.distro} ${osInfo.release}`,
      arch: osInfo.arch,
      kernel: osInfo.kernel,
      cpuLoad: `${cpuLoad.currentLoad.toFixed(1)}%`,
      memory: `${usedMemGB} GB / ${totalMemGB} GB (${memUsagePercent}%)`,
      availableMemory: `${freeMemGB} GB`,
      uptime: formattedUptime,
      networkSpeed: networkSpeed,
    });
  } catch (error) {
    const totalTime = (performance.now() - startTime).toFixed(2);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (${totalTime}ms):`, error);
    throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è uptime –±–æ—Ç–∞ –∏ —Å–∏—Å—Ç–µ–º—ã
export async function getUptime(botStartTime) {
  try {
    // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    const systemUptimeSeconds = os.uptime();
    const systemUptime = formatUptime(systemUptimeSeconds);

    // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    const botUptimeMs = Date.now() - botStartTime;
    const botUptimeSeconds = Math.floor(botUptimeMs / 1000);
    const botUptime = formatUptime(botUptimeSeconds);

    return `ü§ñ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:** ${botUptime}\nüíª **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:** ${systemUptime}`;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è uptime: ${error.message}`);
    return '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Node.js fs
export async function ensureStorageDirectory() {
  if (!env.STORAGE_PATH) {
    return {
      success: false,
      error: ERRORS.STORAGE_PATH_NOT_SET,
    };
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ Node.js fs
    if (!fs.existsSync(env.STORAGE_PATH)) {
      fs.mkdirSync(env.STORAGE_PATH, { recursive: true });
      console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${env.STORAGE_PATH}`);
    }

    return {
      success: true,
      path: env.STORAGE_PATH.replace(/[\\\/]+$/, ''), // –£–±–∏—Ä–∞–µ–º trailing —Å–ª–µ—à–∏
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
    return {
      success: false,
      error: ERROR_TEMPLATES.STORAGE_DIRECTORY_CREATE_ERROR(error.message),
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ñ–∞–π–ª–∞ (–≤ Windows –Ω–µ –Ω—É–∂–Ω–æ)
export async function setFileOwnership(filePath) {
  // –í Windows –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª—ã —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç
  return;
}
